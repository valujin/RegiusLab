import React, { useState, useEffect, useRef } from 'react';
import robot from "../../assets/gpt-robot.png";
import "./ChatGPT.scss";
import plane from "../../assets/plane.png";
import rotate from "../../assets/Rotate.png";

export default function ChatGPT() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [isFlying, setIsFlying] = useState(false);
  const [isRotating, setIsRotating] = useState(false);
  const messagesEndRef = useRef(null);
  const chatMessagesRef = useRef(null);

  function getDate() {
    const time = new Date();
    const minutes = time.getMinutes().toString().padStart(2, "0");
    const currentTime = time.getHours() + ":" + minutes;
    return currentTime;
  }

  const scrollToBottom = () => {
    if (chatMessagesRef.current) {
      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;
    }
  };

  useEffect(() => {
    const initialMessage = {
      sender: "gpt",
      text: "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã.",
    };
    setMessages([initialMessage]);
  }, []);

  const sendMessage = () => {
    if (input.trim()) {
      const userMessage = { sender: "user", text: input };
      const gptMessage = { sender: "gpt", text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µü´§" };

      setMessages((prevMessages) => [...prevMessages, userMessage, gptMessage]);
      setInput("");

      setIsFlying(true);
      setTimeout(() => setIsFlying(false), 2000);
    }
    scrollToBottom();
  };

  const chatReset = () => {
    const initialMessage = {
      sender: "gpt",
      text: "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã.",
    };
    setMessages([initialMessage]);

    setIsRotating(true);
    setTimeout(() => setIsRotating(false), 1000); 
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.ctrlKey) {
      e.preventDefault();
      sendMessage();
    } else if (e.key === 'Enter' && e.ctrlKey) {
      e.preventDefault();
      setInput((prevInput) => prevInput + "\n");
    }
  };

  return (
    <div className="gpt">
      <div className="gpt-main">
        <div className="gpt-main__text">
          <h1 className="gpt-main__title">
            <span className="gpt-main__title-colored">rGPT</span>
            <br />
            –ß–∞—Ç c AI
          </h1>
          <p className="gpt-main__description">
            –î–æ—Ä–æ–≥–∏–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞! <br />
            <br />
            –ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –Ω–æ–≤—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å ‚Äî —á–∞—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º
            –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã,
            –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º AI —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ
            –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –µ—â–µ
            –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏
            –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏!
          </p>
          <a href='#gpt' className="gpt-main__button flare-button">–ù–∞—á–∞—Ç—å</a>
        </div>

        <img src={robot} className="gpt-main__image" alt="" />
      </div>

      <div id='gpt' className="chat">
        <div className="chat__messages" ref={chatMessagesRef}>
        <div className="chat__messages-container">
          {messages.map((msg, index) => (
            <div key={index} className={`chat__message ${msg.sender}`}>
              <div className="chat__message-container">
                {msg.text}
                <span className="chat__message-time">{getDate()}</span>
              </div>
            </div>
          ))}
        </div>
</div>
        <div className="chat__input-container">
          <button onClick={chatReset} className={`chat__reload ${isRotating ? 'rotate' : ''}`}>
            <img src={rotate} className="chat__reload-img" alt="" />
          </button>

          <div className="chat__input-text">
            <textarea
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="–°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å..."
              value={input}
              className="chat__input"
              autoFocus
            ></textarea>

            <button className={`chat__button ${isFlying ? 'fly' : ''}`} onClick={sendMessage}>
              <img src={plane} className="chat__sent-img" alt="" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
